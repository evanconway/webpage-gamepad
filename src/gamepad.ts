const AXIS_DEADZONE = 0.4;

export interface GamepadChecker {
    stickLeftLeft: (gp: Gamepad) => boolean,
	stickLeftRight: (gp: Gamepad) => boolean,
	stickLeftUp: (gp: Gamepad) => boolean,
    stickLeftDown: (gp: Gamepad) => boolean,
    stickRightLeft: (gp: Gamepad) => boolean,
	stickRightRight: (gp: Gamepad) => boolean,
	stickRightUp: (gp: Gamepad) => boolean,
	stickRightDown: (gp: Gamepad) => boolean,
    face0: (gp: Gamepad) => boolean,
	face1: (gp: Gamepad) => boolean,
	face2: (gp: Gamepad) => boolean,
	face3: (gp: Gamepad) => boolean,
    bumperLeft: (gp: Gamepad) => boolean,
	bumperRight: (gp: Gamepad) => boolean,
	triggerLeft: (gp: Gamepad) => boolean,
	triggerRight: (gp: Gamepad) => boolean,
    select: (gp: Gamepad) => boolean,
    start: (gp: Gamepad) => boolean,
	stickLeftButton: (gp: Gamepad) => boolean,
	stickRightButton: (gp: Gamepad) => boolean,
	padUp: (gp: Gamepad) => boolean,
	padDown: (gp: Gamepad) => boolean,
	padLeft: (gp: Gamepad) => boolean,
	padRight: (gp: Gamepad) => boolean,
}

export const gamepadCheckerUnknown: GamepadChecker = {
    stickLeftLeft: gp => gp.axes.length > 0 && gp.axes[0] < AXIS_DEADZONE * -1,
    stickLeftRight: gp => gp.axes.length > 0 && gp.axes[0] > AXIS_DEADZONE,
    stickLeftUp: gp => gp.axes.length > 1 && gp.axes[1] < AXIS_DEADZONE * -1,
    stickLeftDown: gp => gp.axes.length > 1 && gp.axes[1] > AXIS_DEADZONE,
    stickRightLeft: gp => gp.axes.length > 2 && gp.axes[2] < AXIS_DEADZONE * -1,
    stickRightRight: gp => gp.axes.length > 2 && gp.axes[2] > AXIS_DEADZONE,
    stickRightUp: gp => gp.axes.length > 3 && gp.axes[3] < AXIS_DEADZONE * -1,
    stickRightDown: gp => gp.axes.length > 3 && gp.axes[3] > AXIS_DEADZONE,
    face0: gp => gp.buttons.length > 0 && gp.buttons[0].value > 0,
    face1: gp => gp.buttons.length > 1 && gp.buttons[1].value > 0,
    face2: gp => gp.buttons.length > 2 && gp.buttons[2].value > 0,
    face3: gp => gp.buttons.length > 3 && gp.buttons[3].value > 0,
    bumperLeft: gp => gp.buttons.length > 4 && gp.buttons[4].value > 0,
    bumperRight: gp => gp.buttons.length > 5 && gp.buttons.length >= 0 && gp.buttons[5].value > 0,
    triggerLeft: gp => gp.buttons.length > 6 && gp.buttons[6].value > 0,
    triggerRight: gp => gp.buttons.length > 7 && gp.buttons[7].value > 0,
    select: gp => gp.buttons.length > 8 && gp.buttons[8].value > 0,
    start: gp => gp.buttons.length > 9 && gp.buttons[9].value > 0,
    stickLeftButton: gp => gp.buttons.length > 10 && gp.buttons[10].value > 0,
    stickRightButton: gp => gp.buttons.length > 11 && gp.buttons[11].value > 0,
    padUp: gp => gp.buttons.length > 12 && gp.buttons[12].value > 0,
    padDown: gp => gp.buttons.length > 13 && gp.buttons[13].value > 0,
    padLeft: gp => gp.buttons.length > 14 && gp.buttons[14].value > 0,
    padRight: gp => gp.buttons.length > 15 && gp.buttons[15].value > 0,
};

export const gamepadCheckerXbox: GamepadChecker = {
    stickLeftLeft: gp => gp.axes[0] < AXIS_DEADZONE * -1,
    stickLeftRight: gp => gp.axes[0] > AXIS_DEADZONE,
    stickLeftUp: gp => gp.axes[1] < AXIS_DEADZONE * -1,
    stickLeftDown: gp => gp.axes[1] > AXIS_DEADZONE,
    stickRightLeft: gp => gp.axes[2] < AXIS_DEADZONE * -1,
    stickRightRight: gp => gp.axes[2] > AXIS_DEADZONE,
    stickRightUp: gp => gp.axes[3] < AXIS_DEADZONE * -1,
    stickRightDown: gp => gp.axes[3] > AXIS_DEADZONE,
    face0: gp => gp.buttons[0].value > 0,
    face1: gp => gp.buttons[1].value > 0,
    face2: gp => gp.buttons[2].value > 0,
    face3: gp => gp.buttons[3].value > 0,
    bumperLeft: gp => gp.buttons[4].value > 0,
    bumperRight: gp => gp.buttons[5].value > 0,
    triggerLeft: gp => gp.buttons[6].value > 0,
    triggerRight: gp => gp.buttons[7].value > 0,
    select: gp => gp.buttons[8].value > 0,
    start: gp => gp.buttons[9].value > 0,
    stickLeftButton: gp => gp.buttons[10].value > 0,
    stickRightButton: gp => gp.buttons[11].value > 0,
    padUp: gp => gp.buttons[12].value > 0,
    padDown: gp => gp.buttons[13].value > 0,
    padLeft: gp => gp.buttons[14].value > 0,
    padRight: gp => gp.buttons[15].value > 0,
};
