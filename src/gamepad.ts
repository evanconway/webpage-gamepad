const AXIS_DEADZONE = 0.2;

export interface GamepadChecker {
    stickLeftLeft: () => boolean,
	stickLeftRight: () => boolean,
	stickLeftUp: () => boolean,
	stickLeftDown: () => boolean,
    stickRightLeft: () => boolean,
	stickRightRight: () => boolean,
	stickRightUp: () => boolean,
	stickRightDown: () => boolean,
    face0: () => boolean,
	face1: () => boolean,
	face2: () => boolean,
	face3: () => boolean,
    bumperLeft: () =>  boolean,
	bumperRight: () =>  boolean,
	triggerLeft: () => boolean,
	triggerRight: () => boolean,
    select: () => boolean,
    start: () => boolean,
	stickLeftButton: () => boolean,
	stickRightButton: () => boolean,
	padUp: () => boolean,
	padDown: () => boolean,
	padLeft: () => boolean,
	padRight: () => boolean,
}

export const getUnknownGamepadChecker = (gp: Gamepad): GamepadChecker => ({
    stickLeftLeft: () => gp.axes.length > 0 && gp.axes[0] < AXIS_DEADZONE * -1,
    stickLeftRight: () => gp.axes.length > 0 && gp.axes[0] > AXIS_DEADZONE,
    stickLeftUp: () => gp.axes.length > 1 && gp.axes[1] < AXIS_DEADZONE * -1,
    stickLeftDown: () => gp.axes.length > 1 && gp.axes[1] > AXIS_DEADZONE,
    stickRightLeft: () => gp.axes.length > 2 && gp.axes[2] < AXIS_DEADZONE * -1,
    stickRightRight: () => gp.axes.length > 2 && gp.axes[2] > AXIS_DEADZONE,
    stickRightUp: () => gp.axes.length > 3 && gp.axes[3] < AXIS_DEADZONE * -1,
    stickRightDown: () => gp.axes.length > 3 && gp.axes[3] > AXIS_DEADZONE,
    face0: () => gp.buttons.length > 0 && gp.buttons[0].value > 0,
    face1: () => gp.buttons.length > 1 && gp.buttons[1].value > 0,
    face2: () => gp.buttons.length > 2 && gp.buttons[2].value > 0,
    face3: () => gp.buttons.length > 3 && gp.buttons[3].value > 0,
    bumperLeft: () => gp.buttons.length > 4 && gp.buttons[4].value > 0,
    bumperRight: () => gp.buttons.length > 5 &&  gp.buttons.length >= 0 && gp.buttons[5].value > 0,
    triggerLeft: () => gp.buttons.length > 6 &&  gp.buttons[6].value > 0,
    triggerRight: () => gp.buttons.length > 7 &&  gp.buttons[7].value > 0,
    select: () => gp.buttons.length > 8 &&  gp.buttons[8].value > 0,
    start: () => gp.buttons.length > 9 &&  gp.buttons[9].value > 0,
    stickLeftButton: () => gp.buttons.length > 10 && gp.buttons[10].value > 0,
    stickRightButton: () => gp.buttons.length > 11 && gp.buttons[11].value > 0,
    padUp: () => gp.buttons.length > 12 &&  gp.buttons[12].value > 0,
    padDown: () => gp.buttons.length > 13 && gp.buttons[13].value > 0,
    padLeft: () => gp.buttons.length > 14 && gp.buttons[14].value > 0,
    padRight: () => gp.buttons.length > 15 && gp.buttons[15].value > 0,
});

export const getXboxGamepadChecker = (gp: Gamepad): GamepadChecker => ({
    stickLeftLeft: () => gp.axes[0] < AXIS_DEADZONE * -1,
    stickLeftRight: () => gp.axes[0] > AXIS_DEADZONE,
    stickLeftUp: () => gp.axes[1] < AXIS_DEADZONE * -1,
    stickLeftDown: () => gp.axes[1] > AXIS_DEADZONE,
    stickRightLeft: () => gp.axes[2] < AXIS_DEADZONE * -1,
    stickRightRight: () => gp.axes[2] > AXIS_DEADZONE,
    stickRightUp: () => gp.axes[3] < AXIS_DEADZONE * -1,
    stickRightDown: () => gp.axes[3] > AXIS_DEADZONE,
    face0: () => gp.buttons[0].value > 0,
    face1: () => gp.buttons[1].value > 0,
    face2: () => gp.buttons[2].value > 0,
    face3: () => gp.buttons[3].value > 0,
    bumperLeft: () =>  gp.buttons[4].value > 0,
    bumperRight: () =>  gp.buttons[5].value > 0,
    triggerLeft: () => gp.buttons[6].value > 0,
    triggerRight: () => gp.buttons[7].value > 0,
    select: () => gp.buttons[8].value > 0,
    start: () => gp.buttons[9].value > 0,
    stickLeftButton: () => gp.buttons[10].value > 0,
    stickRightButton: () => gp.buttons[11].value > 0,
    padUp: () => gp.buttons[12].value > 0,
    padDown: () => gp.buttons[13].value > 0,
    padLeft: () => gp.buttons[14].value > 0,
    padRight: () => gp.buttons[15].value > 0,
});
