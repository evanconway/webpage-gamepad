1st of January, 2024

Need to figure out how to check gamepad state. The logic isn't too tricky, but we setup a request animation frame loop. If we're going to reference a component state within that loop, we'll have to resetup the requestAnimationFrame loop each time. I'm not quite sure how to do this atm. Will look at more later.


3rd of January, 2024

I'm not sure how axis are logged with this api. Let's add raw axis and button values to the tracked state, rig up a system that detects the last changed controller, plugin a controller and see what happens.


4th of January, 2024

So it looks like the id value for gamepads is actually like a product name. I assumed it was an UUID of some kind. It also looks like the different types of gamepads register dramatically different data for the axis and d-pad. For example, an xbox 360 controller registers full 0-1 inputs on 4 separate buttons for the d-pad, but the nintendo switch or pokken controller registers 9 distinctely different values on the same button for the d-pad. 

Since we seem to get the name of the controller type from the api, we could probably hard code different logic for interpretting controls based on the gamepad id. Unfortuantely I don't have a good way to test this outside of literally acquiring a bunch of different controllers. For now, let's just hard code based on the id, and worry about expanding later.

Ooh, actually, it looks like the d-pad for different controllers has a different default value. I wonder if we could make an educated guess on what kind of controller is plugged in based off that d-pad.

I haven't seen any variation between axis on controllers, so we can assume an axis is two opposite directions on the same stick (for example -1 for left, 1 for right). Triggers also appear consistent, and we can basically treat those as regular buttons.

I suppose another solution for the strange controller button values, is demanding the user maps all controls before using the app. On start the app could check the value of all buttons and axis and consider that "default", and any value other than those default values is considered a different input. I think this would technically work, but I'm not sure how we'd detect that what the user has pressed is "d-pad up", so we can show the user they've mapped "d-pad up" to a specific input.

Right now, we simply detect if the value of a gamepad button/axis value has changed to determine if the application should update. I think we should create some sort of wrapper system that correctly detects what sort of changes count as a change.

I think this wrapper thing could happen during the connect event. Perhaps on connect, we iterate over all
connected gamepads and create some sort of state mapping of gamepad indexes to this wrapper class. The wrapper class would simply be able to detect different states depending on the default values. And honestly it appears the only thing we need to be clever about are these d-pads with multiple values per button.

We should clarify how the wrapper class will actually work. So each controller has mutliple buttons and axis, and some of these buttons are capable of more values than just 1 or 0. I want the wrapper class to consolidate all axis and buttons into a single array of "buttons", and we can query the wrapper class to determine if a button is on or off. This means that for analog stick axis, the wrapper class must know to interperate the value as input for 2 different buttons. For example "left" and "right" will be mapped to the same axis. 0 would mean both are "off". 1 would mean right is on, and -1 would mean left is on. As for the d-pads that create multiple values for the same button... I think if the connected controller has a non-0 value for a button, we can assume this means it's a d-pad, and we should create 4 more actual buttons than there are on the controller. 

I have some vague memory of encountering controllers that trigger more than 1 button upon a d-pad direction press, but I didn't see this again when just checking. So for now I think we can assume if a button has a non-0 value, it's a multi-value d-pad input.

Small note: when pressing the d-pad on my 360 controller, the axis values change slightly. Actually the axis values change slightly with the smallest touch. They must be very sensitive. We'll have to account for this when designing input checking.

So, I have an idea for how to setup this so called wrapper class. Honestly it shouldn't be an entire class, but just an object. And what it contains is a mapping of final button values to interpretor functions for a gamepad index. The object itself will contain an index (correspending to a gamepad index from the api), and an array of button check functions. These functions will be designed to correctly interpret a specific value in the correspending gamepad. Most inputs are buttons, the function will be a simple check of the button value. But for others like axis, it'll check if that axis is beyond a threshold to determine if it returns true.

Another note: triggers on xbox 360 controller are considered buttons, but return a float between 0 and 1.


6th of January, 2024

Just realized a flaw in my button plan. In cases where the d-pad triggers a different value on the same button, we can't check that value for diagonal directions. I have a new temporary plan, let's just disallow d-pad inputs that use the same button for all values. Instead we'll simply recognize button values as "pressed" if they are not 0. This means d-pads which give out mutliple values to the same button will be bugged, but I'm comfortable with that for now.

Ugh, just realized the Playstation 4 controller activates a button and an axis value when pressing the triggers. Also apparently the PS4 d-pad is treated as an axis, not a button. 

Gosh I seriously wonder if it actually would be better to hand code individual interpretations for each controller type.

Perhaps given how weird so many of these are, we can just assume that a non-1 value means the input is "neutral". And when the input changes to anything other than whatever it started as, we consider it "activated". 

Wait, here's an idea. Let's hard code button and axis interpretations for the gamepads we know, but do a best guestimate for unknown pads. For the guestimate, we'll simply ignore all axis and only consider buttons that have a default value of 0. Hopefully this will cover most bases.

The gamepad checker idea seems to work right. What we need now is a way to translate the gamepad checker into a more useable controls state. This will involve letting the user map controls. But for now let's hard code what buttons correspond to what game action. 

We should think through exactly how this works. Firstly we keep track of raw state of the gamepads. This is the values given to us directly from the api. Secondly we'll translate those complex values, which could be axis values, into simple on/off values in the form of an application gamepad. This is the supported stuff like xbox, ps4, and whatever. Finally, we'll map an input from one of the connected gamepads to each arcade button. I suppose the way I'm thinking through this, it'll totally be possible to create mappings with two different gamepads. But I'm not worried about that yet. 

Wait, instead of creating a mapping between raw gamepads and application gamepads, we should just setup functions that automatically get more knowable values from raw gamepads. There's no reason to manually store new functions and objects each time.

Ok now that we have raw gamestates and a more intuitive way of polling them, we can map raw gamepad input to arcade stick input. Again, we'll map a gamepad index and an input to each arcade stick input. For now let's hard wire gamepad 0 and some intuitive inputs to the arcade stick, assume xbox controller. We'll figure out how to handle remapping later.
