1st of January, 2024

Need to figure out how to check gamepad state. The logic isn't too tricky, but we setup a request animation frame loop. If we're going to reference a component state within that loop, we'll have to resetup the requestAnimationFrame loop each time. I'm not quite sure how to do this atm. Will look at more later.


3rd of January, 2024

I'm not sure how axis are logged with this api. Let's add raw axis and button values to the tracked state, rig up a system that detects the last changed controller, plugin a controller and see what happens.


4th of January, 2024

So it looks like the id value for gamepads is actually like a product name. I assumed it was an UUID of some kind. It also looks like the different types of gamepads register dramatically different data for the axis and d-pad. For example, an xbox 360 controller registers full 0-1 inputs on 4 separate buttons for the d-pad, but the nintendo switch or pokken controller registers 9 distinctely different values on the same button for the d-pad. 

Since we seem to get the name of the controller type from the api, we could probably hard code different logic for interpretting controls based on the gamepad id. Unfortuantely I don't have a good way to test this outside of literally acquiring a bunch of different controllers. For now, let's just hard code based on the id, and worry about expanding later.

Ooh, actually, it looks like the d-pad for different controllers has a different default value. I wonder if we could make an educated guess on what kind of controller is plugged in based off that d-pad.

I haven't seen any variation between axis on controllers, so we can assume an axis is two opposite directions on the same stick (for example -1 for left, 1 for right). Triggers also appear consistent, and we can basically treat those as regular buttons.

I suppose another solution for the strange controller button values, is demanding the user maps all controls before using the app. On start the app could check the value of all buttons and axis and consider that "default", and any value other than those default values is considered a different input. I think this would technically work, but I'm not sure how we'd detect that what the user has pressed is "d-pad up", so we can show the user they've mapped "d-pad up" to a specific input.

Right now, we simply detect if the value of a gamepad button/axis value has changed to determine if the application should update. I think we should create some sort of wrapper system that correctly detects what sort of changes count as a change.

I think this wrapper thing could happen during the connect event. Perhaps on connect, we iterate over all
connected gamepads and create some sort of state mapping of gamepad indexes to this wrapper class. The wrapper class would simply be able to detect different states depending on the default values. And honestly it appears the only thing we need to be clever about are these d-pads with multiple values per button.

We should clarify how the wrapper class will actually work. So each controller has mutliple buttons and axis, and some of these buttons are capable of more values than just 1 or 0. I want the wrapper class to consolidate all axis and buttons into a single array of "buttons", and we can query the wrapper class to determine if a button is on or off. This means that for analog stick axis, the wrapper class must know to interperate the value as input for 2 different buttons. For example "left" and "right" will be mapped to the same axis. 0 would mean both are "off". 1 would mean right is on, and -1 would mean left is on. As for the d-pads that create multiple values for the same button... I think if the connected controller has a non-0 value for a button, we can assume this means it's a d-pad, and we should create 4 more actual buttons than there are on the controller. 

I have some vague memory of encountering controllers that trigger more than 1 button upon a d-pad direction press, but I didn't see this again when just checking. So for now I think we can assume if a button has a non-0 value, it's a multi-value d-pad input.

Small note: when pressing the d-pad on my 360 controller, the axis values change slightly. Actually the axis values change slightly with the smallest touch. They must be very sensitive. We'll have to account for this when designing input checking.

So, I have an idea for how to setup this so called wrapper class. Honestly it shouldn't be an entire class, but just an object. And what it contains is a mapping of final button values to interpretor functions for a gamepad index. The object itself will contain an index (correspending to a gamepad index from the api), and an array of button check functions. These functions will be designed to correctly interpret a specific value in the correspending gamepad. Most inputs are buttons, the function will be a simple check of the button value. But for others like axis, it'll check if that axis is beyond a threshold to determine if it returns true.

Another note: triggers on xbox 360 controller are considered buttons, but return a float between 0 and 1.


6th of January, 2024

Just realized a flaw in my button plan. In cases where the d-pad triggers a different value on the same button, we can't check that value for diagonal directions. I have a new temporary plan, let's just disallow d-pad inputs that use the same button for all values. Instead we'll simply recognize button values as "pressed" if they are not 0. This means d-pads which give out mutliple values to the same button will be bugged, but I'm comfortable with that for now.

Ugh, just realized the Playstation 4 controller activates a button and an axis value when pressing the triggers. Also apparently the PS4 d-pad is treated as an axis, not a button. 

Gosh I seriously wonder if it actually would be better to hand code individual interpretations for each controller type.

Perhaps given how weird so many of these are, we can just assume that a non-1 value means the input is "neutral". And when the input changes to anything other than whatever it started as, we consider it "activated". 

Wait, here's an idea. Let's hard code button and axis interpretations for the gamepads we know, but do a best guestimate for unknown pads. For the guestimate, we'll simply ignore all axis and only consider buttons that have a default value of 0. Hopefully this will cover most bases.

The gamepad checker idea seems to work right. What we need now is a way to translate the gamepad checker into a more useable controls state. This will involve letting the user map controls. But for now let's hard code what buttons correspond to what game action. 

We should think through exactly how this works. Firstly we keep track of raw state of the gamepads. This is the values given to us directly from the api. Secondly we'll translate those complex values, which could be axis values, into simple on/off values in the form of an application gamepad. This is the supported stuff like xbox, ps4, and whatever. Finally, we'll map an input from one of the connected gamepads to each arcade button. I suppose the way I'm thinking through this, it'll totally be possible to create mappings with two different gamepads. But I'm not worried about that yet. 

Wait, instead of creating a mapping between raw gamepads and application gamepads, we should just setup functions that automatically get more knowable values from raw gamepads. There's no reason to manually store new functions and objects each time.

Ok now that we have raw gamestates and a more intuitive way of polling them, we can map raw gamepad input to arcade stick input. Again, we'll map a gamepad index and an input to each arcade stick input. For now let's hard wire gamepad 0 and some intuitive inputs to the arcade stick, assume xbox controller. We'll figure out how to handle remapping later.

Trying to add keyboard input as well. Allowing multiple gamepads mapped to the 1 arcade stick feels wrong. Not sure how to organize it otherwise though. I suppose we could just let the user set a gamepad index when binding inputs? Maybe this index just gets set to whatever the index of the last used controller is. 


7th of January, 2024

We added redux to the app. I think next we should move relavent input state into redux, and create an "input" component which will exist at the top level of the app, and will set input state for all other components to use.

Just realized I should clarify how I plan on storing input data. We'll have a slice for raw controller data from the gamepad API. This will basically be a 1-to-1 mapping from the api to the slice. We'll also store raw keyboard input. We'll also store if the user is using keyboard or gamepad. Finally we'll store mappings between gamepad and keyboard to the arcade stick. Lastly we'll have multi-slice selectors that infer the arcade stick position based on the explained raw input data and mappings. 

Just realized that I'm not sure how to use redux dispatch inside of the request animation frame loop. The useDispatch value is a hook. And our useEffect will need to rerun anytime the useDispatch value changes. I suppose that by itself isn't a problem, but I have no idea how to cancel the old request animation loop.

8th of January, 2024

Now that we're moving everything back to state, I'm revisiting the idea of allowing different gamepads mapped to acrade stick input. I think the reason I get caught up on allowing more than one gamepad to be mapped to input is because it seems word to ask the user to pick which controller port they're going to use. When mapping an action it seems more straight forward to just put the app into a listening state, and map the first non-keyboard input to the selected action. Wait a sec, we could even allow for keyboard and gamepad inputs to be mixed together couldn't we? We could treat keyboard like a controller port. Action mappings could map a controller port and button to the action. And if keyboard is like its own board the buttons would be the keys themselves. I actually like this idea better. We'll continue with out plan of creating special controller interpretation functions, but we'll also treat the keyboard like a controller with its own unique inputs.

We've got proper mapping and input detection, as well as an abstraction for the arcade stick. Next let's setup input mapping. We need to be able to put the app into "mapping" mode somehow, and the next valid input will be tracked and mapped to our input mapping slice. I'm having trouble thinking through exactly how this would work. Actually, I wonder if the way we store gamepad state is flawed. What if we only store a simple binary input abstraction instead of the entire set of buttons and axis? And we let our top level input component determine if these values are ready to change or not. This way we could easily determine if an input is "on" or "off".

I'm thinking through this because we need a way to determine if an input change can be mapped to an action. Our "last input" idea won't work if we implement it mindlessly. Because there will always be a "last input", and if we set the app to map an action to the last input, it'll just immediately map whatever the last action was. I suppose we could rig it so that it maps the next change to last input? Actually this is probably the way to do it. We'll change how gamepad data is stored to be our simplified version using only on/off values. We'll track a 'last input' value. And the first 'on' input which is the current last input, will be mapped to the selected action. I do wonder if perhaps this could be something handled in the component itself, and we don't need to store this in the redux state.

We've successfully changed over how we store gamepad state. Next let's add a crude input mapping component. For this... I guess we should do it in a very react way. I think we'll grab the entire keyboard and gamepad array state from a selector, and use a useEffect hook to execute logic whenever these change. We'll use a ref to store the previous state, and we'll determine what buttons changed when the values change. And if we're listening for an input, we'll determine what input should be mapped to the latest button press.


10th of January, 2024

We did some rewriting of state so things are clearer. And we have a proper display of our input mappings. But now we have to actually execute the logic that occurs when the user clicks an "assign input" button. Since we have specific setter functions for input mappings, we'll need to determine what specific state setter is used based on the button pressed. So we can't simply assign the same function to all buttons. Ah... but what if the setter function itself was a parameter passed in? I think that's how we'll do this.

So when the user clicks the assign button, we need to set this component to a state where it's listening for the next input. And once that input is detected, the mapping set function set for that button is invoked on the new input.

I'm realizing since the rest of the app will have activity based on the users input, we may have to set the app up so the other logic is ignored while the user is mapping inputs. But for now we'll just let the mapper keep track of its own state.


11th of January, 2024

We've got a proper input history now. I think our next step should be making code which can determine if history is equal to certain moves. If we could be ultra precise with inputs, this would be easy. But we want to allow for multiple histories to be valid for the same input. For example. The shoryuken motion should be valid given any of the following histories:

6
2
3p

6
5
2
3
5p

6
5
2
3p

Truthfully, I wonder if we can just hardcode different options for each input. Let's just try that first and see what happens.

Actually what we can do is store moves as arcade stick histories. We'll just compare them and if they match, the move was valid. But we could store more than 1 history for each move, and compare all of them to see if it's valid.


12th of January, 2024

We have a system that correctly detects specific moves based on the input history. And we can program the moves to have variations or shortcuts. I have to admit I'm not completely sure what I want to do next. Let's rethink through what we want our end experience to be, then asses what's left.

We added left/right and light/medium/heavy versions of our 2 moves. But I'm unsure this was the right way to do it. I think perhaps manually writing out the light/medium/heavy versions makes sense, because we may want to program moves that are more complex than just a motion and button and the individual buttons matter (like Akuma's super). However I think perhaps we should make a move checker function that accounts for left/right mirroring of the move. That way we can easily add a setting like "allow mirrors" in the app, which uses either checking function when checking a move. And we could also add a up/down inversion checker with the same logic. 

Actually, after looking over our logic, I bet we can modify our arcadeStickStateEqual function to account for left right and/or up down mirroring. Let's do that and see how it turns out.

We managed to rework how we check moves. We also added time checking to input checking. So now if we input a move too slowly, it won't count. However I think we'll want to make this optional. Also I'm questioning if making mirror checking was a smart idea, because in the end version of this thing we'll want to pick moves which are randomly selected for us to do. We probably want to specifically pick left or right versions of moves. And I think it's smart to use anime notation for this thing. That way we don't have to worry about what to call the moves, and we can correctly display a forward or backward versions of moves. 


14th of January, 2024

I was mulling over how to handle storing moves. I'm considering changing back to storing left/right versions of moves individually. We'll have to display the move to the users, and I kind of like the idea of displaying the exact inputs they need to give. Like 214P for a left facing hadouken, and 623P for a right facing shoryuken. So we'll have to remake our copyMoveMirrored function. Also... something that might be a very real issue is the legality of using words like "hadouken" or "shoryuken" to represent moves. There might be a legal claim to them, and I could get myself in trouble using them.

So, let's remake our move system so we can create mirrors of moves easily. And display move names using anime notation.

That wasn't too bad to rework. I was going to add the half circle moves next. However it's clear that now we'll run into the issue of overlapping moves. For example 41236PH overlaps with 236PH. Here's how I think we can handle that. First we'll create a new slice where we'll store all moves the user is currently checking for. Second we'll setup that stored state so moves are sorted by input lenght. You see I think checking for the longest move first should be a bullet proof way of ensuring we don't have accidental overlap. I think we may have to place move checking into the slice, but I'm not sure. Let's just create this slice that collects moves first, then see how we feel.

We added both the overlap proof move detection, and also a basic system for randomly selecting a target move and detecting if the user has correctly executed it.

I was reading about the 360 motion and how it's typically interpreted in engines. And I think our current system might not be ideal. It looks like most games will accept a 360 motion as long as all cardinal motions have been hit. The order does not matter so long as it was clockwise or counter-clockwise. An input history of 6248P would be valid, as would 8426P. Trying to account for this with our current system would require us to account for literally every combination of precise inputs that would work in the system described above. That doesn't seem right. So what I'm wondering instead is if moves should get their own callback function to determine if an input history is valid. It certainly gives us far more flexibility. We'd have to use a different system to resolve overlapping moves, but I'm not too worried about that. Honestly we could just give moves a semi-arbitrary number to determine their presidence in overlap. My main reservation about this system is how much more code we'd need for each individual move. But as I think about I think this isn't going to be a real issue. Let's change move detection to this new system, add in the 360 motion, and see how we feel.

I forgot something. If we make the move check system a function, we can't legally put it in redux state. Redux does not like values which cannot be serialized into json format (or whatever it does). I think we can keep with this system. But we'll have to let moves exist as app constants outside of the redux state. And we'll store a reference to these moves in the redux state. And by reference I mean like their name or something. Not an actual memory reference, as this would be rejected by the redux state.

15th of January, 2024,

We were able to fix our circle input and move the function out of redux state. I'm aware of two things now. Firstly that our circle motion logic doesn't check for input timing at all. And becuase of that, inputs that shouldn't be considered in the motion are still considered. It shouldn't be too hard to make our function correctly account for timing. But I can't help but wonder if we shouldn't have a more elegant system for checking input timing. Also our system doesn't correctly consider inputs held for along time a part of the motion. We check for when the input first appears. To be more clear, if you held 6 for 3 or more seconds, then very quickly did 2 -> 3 -> P1, a normal fighting game would consider that a correct shoryuken motion. But our system demands that the forard input start within the time limit of the move. Furthermore in regular games any button presses made during that motion don't ruin the move. All that matters is the motion, and did the user press the final punch button while holding 3, and in a state they can do the move. Our system should reflect this behavior.


20th of January, 2024

So, I'd like to redo how we detect moves so that the system works more like how actual games work. But I think we'll put that off for later. At this moment we have a bunch of moves that can be correctly identified. I think we should add components which let the user select which moves will be randomly selected. Or if one move should be drilled. 

I also want to put some though into the input display. I think it'd be cool for the user to be able to see when they input something incorrectly. Honestly this should be straight forward to most moves. But what about the 360? The 360 can be performed a number of different ways. I'm not sure how best to display that. Maybe we insist on a specific way of performing the 360? These requires some thought.


22nd of January, 2024

After chatting with some people and thinking about this, I had an idea. Each move should have a function that determines if the given input history is valid, and also a function which determines if the given input history is on track to be the given move. This way we could display the input history of the user, and highlight moves in green until they're no longer valid for the move. Ooh, or maybe we should have the function return the index of the first input state in a given history that doesn't work for a move. That might be best, but I realized I'm making the assumption the given input history will only be states that are an attempt at the given move. So after the user completes a move, should we clear the input history? Or perhaps wait for the user to let the controller return to a neutral state (direction 5, no buttons pressed) before attempting to check input history?


24th of January, 2024

Reflecting on inputs again. I was just playing Undernight 2 and the tutorial specifically mentioned that it's possible to trigger a 360 motion with 632147. This is very different from the "just hit all the cardinals" attitude I used for the 360 originally.

I can't remember if I reflected on this yet, but I think we can make a set of functions that interpret moves the very exact way we did before, in addition to more loose, weird functions like the 360. So we could simply add the 632147 motion as another move. We could continue with our plan of detecting if a fresh history is correct for the move up to a certain point, and detecting which input is the first "wrong" input.

Actually what I should add here, is a note about the difference between detecting where a specific history goes wrong for a move, and detecting if a given history triggers a move. The former starts at the beginning of the history, and checks until an incorrect or the final correct input occurs. The latter starts with the end of the history, and detects the move in reverse. Do we need both detection styles in this app? Detecting if a move occurs going from the end of the history and working backwards is how I'd implement this in an actual game, but we need detection from history start for display incorrect inputs for a targetted move. It seems very wrong to have 2 very different styles of input detection. And definitely seems like we should use the more game-correct style, and somehow work it to detect the first incorrect input for a given move. I need to think about this more...


29th of January, 2024

Man I've hard a really hard time getting back into this. Last time we reflected on the differences between detecting moves from the first input, versus working backwards from the last input. Something we need to acknowledge is that we 100% need the first input style detection since that's the point of the app. I also think we 100% need to use specific history checking so that we can inform the user when they've input a move incorrectly. This feels a bit wrong since the loose 360 motion doesn't really fit with this. But I have 1 idea. We could allow specific moves to ignore direction input states that aren't a part of their sequence. So for the loose 360, the diagonals would be ignored completely. I also think it might be acceptable to implement specific directions and rotation starts. Something that had been throwing me off is that the 360 motion can be started from anywhere. But perhaps we don't worry about that and we just demand the user start from a specific spot? I mean if we insist on starting from a cardinal direction, and account for clockwise and counter direction, that's only 4 variations. And that's not too gross IMO. 

So yes. We'll re-commit to defining specific move histories for moves. And we'll implement a system for detecting them from the first input. Oh, and we'll have to insist the users controller being in the neutral state of direction 5 and no buttons pressed.

Let's just restate that because I've had a really hard time wrapping my head around this project again. We're going to commit to a specific state history system for input interpretation. We're going to detect moves from the first non-neutral input. Look above for details on how we'll handle the 360 and other moves that are less specific.


30th of January, 2024

So I was mulling over whether I to allow just P or only 6P for the final state when performing 236P. I decided to check how the original SF2 handled it and learned it doesn't handle inputs the way I thought it did. From what I gather, as long as the game detects 2, 3, 6, P in that order and within a certain time frame, regardless of what other inputs where in between, the game considers this a 236 motion. This appears to be true in Undernight as well, and I'm willing to bet this is true in almost all other fighters.

Although I made a dramatic gesture of typing out the plan we should commit to, this new information changes how we should interpret moves. We could still define moves very specifically, as an exact history, without the need for special functions to determine certain moves. What we could also do is rig our move display to highlight components of the move once the user input history includes it. So for example if the users history was 12354, the '2' and '3' of 236P would be lit up. What's cool is we can go back to our original idea of interpretting inputs from the end going backwards, just how a game would work. The only difference is we need an extra system to detect which elements of the move have been completed. I think we could just work backwards in the history until we find the first state of the move, if it exists, then work forwards again. I know we'd only consider a move complete if the final history state is also the final state of the move. But perhaps we could combine the function that determines if a move has been completed with the function that determines how many components of a move have been completed. Would it be acceptable to simply check if the number of components completed is the same as the components of the move, and if the last history state is equal to the last component of the move? I'm willing to be that would work, or if it doesn't a better solution would be similar.

The last point to make, is I believe we could rig our detection system to dissallow inputs that aren't a part of the move history, with the exception of the neutral state. I bet since we can get the number of components in the move performed, we could get the next component that needs to be performed in the move. 

I think we'll need to differentiate between buttons being down and pressed. Right now I think we may never need to know if a button is down, but we'll definitely need to know about presses.

We should change how individual move states work so that we're only checking for specific aspects. For example, if the first part of 236P is '2', we don't care what other buttons are down/pressed when the 2 state occurs. So we should define a move state as something with optional components. And when comparing it against the arcade stick history, we're only checking for the components that are actually defined in the move state. And those components are the 6 buttons and the direction.

Let's add the idea that we'll check move steps against the same history step until it's not valid. This will resolve our issue of needing different definitions of 236P and similar moves where 1 version has a final step of 6P, and one version has a final step of just P.

For next time we need to think through more clearly how down vs pressed is going to work. We'll also need to think about this for direction as well.


7th of February, 2024

Still struggling to really get re-started on this thing. But I had a thought:
We want to interpret moves from start to finish for determining if we did a move wrong. We want to interpret moves from end to start to determine if a move was performed. What if we made a function which just iterated over the move steps and history forwards or backwards depending on an optional variable?


9th of February, 2024

I think the simple idea of a function which compares input history against move steps, but with a configurable direction is the correct path. I'm making a note here that I think we'll have to change arcade stick state to store the concept of pressed in addition to down.

Oh wait... I think we already did that.


I think it makes sense to store our input state history in the same order we store move steps. So from now on the end of the input history array is the most recent move.


